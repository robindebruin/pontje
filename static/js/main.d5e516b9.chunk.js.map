{"version":3,"sources":["constants/FerryRoutes.ts","components/Departure/Departure.tsx","components/FerryTimes/FerryTimes.tsx","utils/time.ts","components/Loading.tsx","components/Destination/helpers/nextDepartureTime.ts","components/Footer/Footer.tsx","components/Destination/Destination.tsx","components/Destination/helpers/stripDepartureTimes.ts","components/Journey.tsx","components/Routes.jsx","components/Back.tsx","App.js","serviceWorker.js","index.js"],"names":["Harbor","name","url","this","dest","val","PONT_STEIGER","CS","NDSM","destinations","port","lines","Ports","Departure","className","map","key","to","FerryTimes","depTimes","closestTimeIndex","time","Time","date","Date","getHours","getMinutes","getSeconds","split","hours","minutes","seconds","setHours","setMinutes","setSeconds","ms","toISOString","slice","day","getDay","displayDay","push","Loading","nextDepartureTimeIndex","currentTime","soonestDepTimeIndex","closestTimeIndexes","find","nextDepartureTimeIndexObj","Object","keys","value","findIndex","nextDepartureTimeIndexes","Footer","getDayType","x","line","withRouter","props","useState","setDepTimes","getTheTime","setCurrentTime","match","params","dep","des","departurePort","p","destinationPort","useEffect","forEach","Promise","all","fn","fetch","then","res","json","ferryTimes","prev","currentDayNames","reduce","acc","ferryTime","departure","schedules","filter","schedule","some","validFor","includes","times","t","flat","stripDepartureTimes","catch","err","console","error","setInterval","msToHMS","Math","abs","timeToDateObj","nextDepartureTime","Journey","ROUTES","path","exact","component","Routes","route","Component","history","onClick","goBack","App","Boolean","window","location","hostname","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5e516b9.chunk.js","sourcesContent":["interface Harbor {\n  name: string;\n  url: string;\n  dest: { port: Harbor; lines: Array<string> }[];\n}\n\nclass Harbor {\n  constructor(name, url) {\n    this.name = name;\n    this.url = url;\n  }\n\n  get destinations() {\n    return this.dest;\n  }\n\n  set destinations(val) {\n    this.dest = val;\n  }\n\n  get allDepartureTimes() {\n    return '';\n  }\n}\n\nconst PONT_STEIGER = new Harbor('Pont steiger', 'pont-steiger');\nconst CS = new Harbor('Centraal', 'centraal');\nconst NDSM = new Harbor('NDSM', 'ndsm');\n\nNDSM.destinations = [\n  { port: CS, lines: ['905_NDM_CS', '906_NDSM_CS'] },\n  { port: PONT_STEIGER, lines: ['903_NDSM_PST'] },\n];\nPONT_STEIGER.destinations = [{ port: NDSM, lines: ['903_PST_NDSM'] }];\nCS.destinations = [{ port: NDSM, lines: ['906_CS_NDSM', '905_CS_NDSM'] }];\n\nexport const Ports = [NDSM, PONT_STEIGER, CS];\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Ports } from '../../constants/FerryRoutes';\n\nfunction Departure() {\n  return (\n    <div className=\"departure\">\n      {Ports.map(port => (\n        <div key={port.name} className=\"departure-link\">\n          <Link to={`/${port.url}`}>{port.name}</Link>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Departure;\n","import React from 'react';\nimport { DepTimes } from '../../constants/FerryTime.interface';\n\ninterface Props {\n  depTimes: DepTimes;\n  destinationPortName: string;\n  closestTimeIndex: number;\n}\n\nfunction FerryTimes({ depTimes, closestTimeIndex = 0 }) {\n  if (!depTimes) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"ferry-times\">\n      {depTimes.map(time => (\n        <div key={time}>{time}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default FerryTimes;\n","export default class Time {\n  static getTheTime() {\n    const date = new Date();\n    const currentTime = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n    return currentTime;\n  }\n\n  static timeToDateObj(time: string): Date {\n    const [hours, minutes, seconds] = time.split(':');\n    let date = new Date();\n    date.setHours(+hours);\n    date.setMinutes(+minutes);\n    date.setSeconds(+seconds);\n    return date;\n  }\n\n  static msToHMS(ms) {\n    return new Date(ms).toISOString().slice(11, 19);\n  }\n\n  static getDayType(): string[] {\n    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n    const day = new Date().getDay() - 1;\n    let displayDay = [];\n\n    if (day < 6) {\n      displayDay.push('weekdays');\n    }\n    return [...displayDay, days[day]];\n  }\n}\n","import React from 'react';\n\nfunction Loading() {\n  return <div>Loading..</div>;\n}\n\nexport default Loading;\n","import Time from '../../../utils/time';\nimport { DepTimes, IndexOfClosestDepTime } from '../../../constants/FerryTime.interface';\n\nfunction nextDepartureTimeIndexes(depTimes: DepTimes, currentTime: string): IndexOfClosestDepTime[] {\n  return Object.keys(depTimes).map(key => ({\n    name: key,\n    value: depTimes[key].findIndex(time => time > currentTime),\n  }));\n}\n\nfunction nextDepartureTimeIndexObj(closestTimeIndexes: IndexOfClosestDepTime[], name: string): IndexOfClosestDepTime {\n  return closestTimeIndexes.find(time => time.name === name);\n}\n\nexport function nextDepartureTimeIndex(name: string, depTimes: DepTimes, currentTime: string): number {\n  const closestTimeIndexes = nextDepartureTimeIndexes(depTimes, currentTime);\n  const soonestDepTimeIndex = nextDepartureTimeIndexObj(closestTimeIndexes, name);\n  return soonestDepTimeIndex ? soonestDepTimeIndex.value : 0;\n}\n\nexport function nextDepartureTime(name: string, depTimes: DepTimes, currentTime: string): string {\n  const soonestDepTimeIndex = nextDepartureTimeIndex(name, depTimes, currentTime);\n  if (!soonestDepTimeIndex || soonestDepTimeIndex < 0) {\n    return;\n  }\n  return Time.msToHMS(\n    Math.abs(\n      (Time.timeToDateObj(depTimes[name][soonestDepTimeIndex]) as any) - (Time.timeToDateObj(currentTime) as any),\n    ),\n  );\n}\n","import React from 'react';\nimport Time from './../../utils/time';\n\nfunction Footer({ lines }: { lines: string[] }) {\n  return (\n    <div className=\"meta-info\">\n      <div>\n        {Time.getDayType().map(x => x + ', ')}\n        {lines && lines.map(line => `${line}, `)}\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Ports } from '../../constants/FerryRoutes';\nimport FerryTimes from '../FerryTimes';\nimport { FerryTime, DepTimes, RouteInfo } from '../../constants/FerryTime.interface';\nimport Time from '../../utils/time';\nimport Loading from '../Loading';\nimport { stripDepartureTimes } from './helpers/stripDepartureTimes';\nimport { nextDepartureTime, nextDepartureTimeIndex } from './helpers/nextDepartureTime';\nimport Footer from './../Footer';\n\nfunction fetchJSON(fileName): Promise<FerryTime> {\n  return fetch(`./../ferry-times/${fileName}.json`).then(res => res.json());\n}\n\nfunction Destination(props: RouteComponentProps<RouteInfo>) {\n  const [depTimes, setDepTimes] = useState<DepTimes>();\n  const [currentTime, setCurrentTime] = useState(Time.getTheTime());\n\n  const { dep, des } = props.match.params;\n  const departurePort = Ports.find(p => dep === p.url);\n  const destinationPort = Ports.find(p => des === p.url);\n\n  useEffect(() => {\n    departurePort.destinations.forEach(dest => {\n      Promise.all(dest.lines.map(fn => fetchJSON(fn)))\n        .then(ferryTimes =>\n          setDepTimes(prev => ({\n            ...prev,\n            ...{ [`${dest.port.name}`]: stripDepartureTimes(ferryTimes, Time.getDayType()) },\n          })),\n        )\n        .catch(err => console.error(err));\n    });\n  }, [departurePort]);\n\n  // Run timer every second\n  setInterval(() => {\n    setCurrentTime(Time.getTheTime());\n  }, 1000);\n\n  if (!depTimes) return <Loading />;\n\n  return (\n    <>\n      <div>\n        {departurePort.destinations.map(des => (\n          <div className=\"departure-port\" key={des.port.name}>\n            <div className=\"departure-row-inner-left\">\n              <Link to={`/${dep}/${des.port.url}`}>{des.port.name}</Link>\n            </div>\n            <div className=\"departure-row-inner-right\">{nextDepartureTime(des.port.name, depTimes, currentTime)}</div>\n          </div>\n        ))}\n      </div>\n\n      <FerryTimes\n        depTimes={depTimes[destinationPort?.name]}\n        closestTimeIndex={nextDepartureTimeIndex(destinationPort?.name, depTimes, currentTime)}\n      />\n\n      <Footer lines={departurePort.destinations.find(des => des.port === destinationPort)?.lines} />\n    </>\n  );\n}\nexport default withRouter(Destination);\n","import { FerryTime } from '../../../constants/FerryTime.interface';\n\nexport function stripDepartureTimes(ferryTimes: FerryTime[], currentDayNames: string[]): string[] {\n  return ferryTimes.reduce((acc, ferryTime) => {\n    // check if one of currentDayNames is represented in schedule.validFor\n    const schedules = ferryTime.schedules.filter(schedule =>\n      currentDayNames.some(day => schedule.validFor.includes(day)),\n    );\n    const times = schedules.map(schedule => schedule.times);\n    const departure = times.map(time => time.map(t => t.departure));\n    return [...acc, ...departure.flat()];\n  }, []);\n}\n","import React from 'react';\nimport Departure from './Departure';\nimport Destination from './Destination';\n\nfunction Journey() {\n  return (\n    <>\n      <Departure />\n      <Destination />\n    </>\n  );\n}\n\nexport default Journey;\n","import React, { Component } from 'react';\nimport Departure from './Departure';\nimport { Switch, Route } from 'react-router-dom';\nimport Journey from './Journey';\n\nconst ROUTES = [\n  { path: '/', exact: true, component: Departure },\n  { path: '/:dep/:des', exact: false, component: Journey },\n  { path: '/:dep', exact: false, component: Journey },\n];\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        {ROUTES.map(route => (\n          <Route {...route} key={route.path}></Route>\n        ))}\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction Back({ history }) {\n  return <div onClick={() => history.goBack()}>Back</div>;\n}\n\nexport default withRouter(Back);\n","import React from 'react';\nimport './App.scss';\nimport Routes from './components/Routes';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"section\">\n        {/* <Header /> */}\n        <Routes></Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { HashRouter } from 'react-router-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  //   <HashRouter basename={process.env.PUBLIC_URL}>\n  //   <App />\n  // </HashRouter>\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}