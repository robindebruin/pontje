{"version":3,"sources":["constants/FerryRoutes.ts","components/Departure/DepartureHeader.tsx","components/Button/Button.tsx","components/ArrowToggle/ArrowToggle.tsx","components/Departure/Departure.tsx","utils/Time.ts","components/FerryTimes/FerryTimes.tsx","components/Loading.tsx","components/Destination/helpers/nextDepartureTime.ts","components/Destination/DestinationHeader.tsx","utils/HttpClients.ts","hooks/useHttpClient.tsx","components/Destination/Destination.tsx","components/Destination/helpers/stripDepartureTimes.ts","components/Journey.tsx","components/Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["Harbor","name","url","fullName","this","dest","val","PONT_STEIGER","CS","NDSM","IJPLEIN","AZARTPLEIN","ZAMENHOFSTRAAT","DISTELWEG","destinations","port","lines","Ports","divStyle","backgroundColor","color","padding","fontVariantCaps","fontSize","DepartureHeader","title","style","Button","active","className","children","isActive","ArrowToggle","isOpen","open","Departure","departurePort","useState","toggle","setToggle","history","useHistory","map","onClick","push","onDepartureClick","key","listName","Time","date","Date","h","getHours","m","getMinutes","s","getSeconds","minutes","seconds","time","split","hours","setHours","setMinutes","setSeconds","ms","toISOString","slice","day","getDay","displayDay","hh","mm","ss","FerryTimes","destinationPortName","depTimes","closestTimeIndex","stripSeconds","timeLeftBeforeDeparture","Math","abs","timeToDateObj","getTheTime","hhmmss","msToHMS","HoursMinutes","hourMinuteNotation","Loading","props","nextDepartureTimeIndex","currentTime","soonestDepTimeIndex","closestTimeIndexes","find","nextDepartureTimeIndexObj","Object","keys","value","findIndex","nextDepartureTimeIndexes","DestinationHeader","HttpClient","axios","create","baseURL","process","timeout","useHttpClient","response","setResponse","hookStatus","setHookStatus","useCallback","axiosInstance","a","async","request","fetchResponse","data","console","error","Destination","destinationPort","setDepTimes","setCurrentTime","ferryTime","fetchFerryTimes","ferryTimes","setFerryTimes","useEffect","flatMap","destination","forEach","line","departureTimes","filterFerryTimes","filter","journey","fullname","matchingDestinations","currentDayNames","reduce","acc","departure","schedules","schedule","some","validFor","includes","times","t","flat","stripDepartureTimes","getDayType","setInterval","des","stripHours","nextDepartureTime","withRouter","match","params","dep","p","ROUTES","path","exact","component","Journey","Routes","route","to","Component","App","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a79396b0.chunk.js","sourcesContent":["export interface Harbor {\n  name: string;\n  url: string;\n  dest: { port: Harbor; lines: Array<string> }[];\n  fullName: string;\n}\n\nexport class Harbor {\n  constructor(name: string, url: string, fullName: string) {\n    this.name = name;\n    this.url = url;\n    this.fullName = fullName;\n  }\n\n  get destinations() {\n    return this.dest;\n  }\n\n  set destinations(val) {\n    this.dest = val;\n  }\n\n  get allDepartureTimes() {\n    return '';\n  }\n}\n\nconst PONT_STEIGER = new Harbor('Pont steiger', 'pont-steiger', 'Pontsteiger');\nconst CS = new Harbor('Centraal', 'centraal', 'Centraal Station');\nconst NDSM = new Harbor('NDSM', 'ndsm', 'NDSM');\nconst IJPLEIN = new Harbor('IJplein', 'ijplein', 'IJplein');\nconst AZARTPLEIN = new Harbor('Azartplein', 'azartplein', 'Azartplein');\nconst ZAMENHOFSTRAAT = new Harbor('Zamenhofstr', 'zamenhofstr', 'Zamenhofstraat');\nconst DISTELWEG = new Harbor('Distelweg', 'distelweg', 'Distelweg');\n\nNDSM.destinations = [\n  { port: CS, lines: ['905_NDSM_CS', '906_NDSM_CS'] },\n  { port: PONT_STEIGER, lines: ['903_NDSM_PST'] },\n];\nPONT_STEIGER.destinations = [\n  { port: NDSM, lines: ['903_PST_NDSM'] },\n  { port: DISTELWEG, lines: ['900_PST_DSW'] },\n];\nCS.destinations = [\n  { port: NDSM, lines: ['906_CS_NDSM', '905_CS_NDSM'] },\n  { port: IJPLEIN, lines: ['902_CS_IJN'] },\n];\nAZARTPLEIN.destinations = [{ port: ZAMENHOFSTRAAT, lines: ['915_AZP_ZHS'] }];\nZAMENHOFSTRAAT.destinations = [{ port: AZARTPLEIN, lines: ['915_ZHS_AZP'] }];\nDISTELWEG.destinations = [{ port: PONT_STEIGER, lines: ['900_DSW_PST'] }];\nIJPLEIN.destinations = [{ port: CS, lines: ['902_IJN_CS'] }];\n\nexport const Ports = [NDSM, PONT_STEIGER, CS, IJPLEIN, AZARTPLEIN, ZAMENHOFSTRAAT, DISTELWEG];\n","import React from 'react';\nimport CSS from 'csstype';\n\nconst divStyle: CSS.Properties = {\n  backgroundColor: 'var(--color-2)',\n  color: 'var(--color-3)',\n  padding: '0.1em 0 0 0.5em',\n  fontVariantCaps: 'all-small-caps',\n  fontSize: '20px',\n};\n\nfunction DepartureHeader({ title }) {\n  return (\n    <div style={divStyle}>\n      <div> {title}</div>\n    </div>\n  );\n}\n\nexport default DepartureHeader;\n","import React, { ReactNode } from 'react';\n\ninterface ButtonProps {\n  active?: boolean;\n  className?: string;\n  children?: ReactNode;\n}\n\nfunction Button({ active = false, className, children }: ButtonProps) {\n  const isActive = active && 'btn__selected';\n\n  return <div className={`btn ${isActive} ${className}`}>{children}</div>;\n}\n\nexport default Button;\n","import React from 'react';\n\ninterface Props {\n  open: boolean;\n}\n\nfunction ArrowToggle({ open }: Props) {\n  const isOpen = open ? 'arrow--open' : '';\n  return (\n    <a className={`arrow ${isOpen}`}>\n      <span className={`arrow__bar arrow__bar--left `}></span>\n      <span className={`arrow__bar arrow__bar--right `}></span>\n    </a>\n  );\n}\n\nexport default ArrowToggle;\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Ports, Harbor } from '../../constants/FerryRoutes';\nimport DepartureHeader from './DepartureHeader';\nimport Button from '../Button';\nimport ArrowToggle from '../ArrowToggle';\n\ninterface Props {\n  departurePort: Harbor;\n}\n\nfunction Departure({ departurePort }: Props) {\n  const [toggle, setToggle] = useState(false);\n  const history = useHistory();\n\n  const isActiveClass = (listName: string): boolean => listName === departurePort?.name;\n  const toggleExpand = () => setToggle(!toggle);\n  const onDepartureClick = port => history.push(`/${port}`);\n\n  return (\n    <>\n      <DepartureHeader title=\"Vertrek\"></DepartureHeader>\n      <div className={`departure ${toggle ? 'expand' : 'decreased'}`}>\n        {Ports.map(port => (\n          <span onClick={() => onDepartureClick(port.url)} key={port.name}>\n            <Button className={`departure-link `} active={isActiveClass(port.name)}>\n              {port.name}\n            </Button>\n          </span>\n        ))}\n      </div>\n      <div className=\"toggle\" onClick={toggleExpand}>\n        <div className=\"toggle toggle--btn\">\n          <ArrowToggle open={toggle} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Departure;\n","export default class Time {\n  static getTheTime(): string {\n    const date = new Date();\n    const { h, m, s } = { h: date.getHours(), m: date.getMinutes(), s: date.getSeconds() };\n    const hours = h < 10 ? '0' + h : h;\n    const minutes = m < 10 ? '0' + m : m;\n    const seconds = s < 10 ? '0' + s : s;\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  static timeToDateObj(time: string): Date {\n    const [hours, minutes, seconds] = time.split(':');\n    let date = new Date();\n    date.setHours(+hours);\n    date.setMinutes(+minutes);\n    date.setSeconds(+seconds);\n    return date;\n  }\n\n  static msToHMS(ms) {\n    return new Date(ms).toISOString().slice(11, 19);\n  }\n\n  static getDayType(): string[] {\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const day = new Date().getDay();\n    let displayDay = [];\n\n    if (day !== 0 && day !== 6) {\n      displayDay.push('weekdays');\n    }\n    return [...displayDay, days[day]];\n  }\n\n  static stripSeconds(time: string): string {\n    if (!time) return;\n    const [hh, mm] = time.split(':');\n    return `${hh}:${mm}`;\n  }\n\n  static stripHours(time: string): string {\n    if (!time) return;\n    const [hh, mm, ss] = time.split(':');\n    return `${mm}:${ss}`;\n  }\n\n  static HoursMinutes(time: string): string {\n    if (!time) return;\n    const [hh, mm, ss] = time.split(':');\n    return `over ${hh !== '00' ? hh + ' uur en' : ''} ${mm} min`;\n  }\n}\n","import React from 'react';\nimport { DepTimes } from '../../constants/FerryTime.interface';\nimport Time from '../../utils/Time';\n\ninterface Props {\n  destinationPortName: string;\n  depTimes: string[];\n  closestTimeIndex: number;\n}\n\nfunction FerryTimes({ destinationPortName = '', depTimes, closestTimeIndex = 0 }: Props) {\n  const hourMinuteNotation = time => {\n    const timeLeftBeforeDeparture = Math.abs(\n      (Time.timeToDateObj(time) as any) - (Time.timeToDateObj(Time.getTheTime()) as any),\n    );\n    const hhmmss = Time.msToHMS(timeLeftBeforeDeparture);\n    return Time.HoursMinutes(hhmmss);\n  };\n\n  if (!depTimes) {\n    return <div className=\"ferry-times\" />;\n  }\n\n  return (\n    <div className=\"ferry-times\">\n      <div className=\"ferry-times ferry-times__title\">{destinationPortName}</div>\n      {depTimes.slice(closestTimeIndex).map(time => (\n        <div className=\"ferry-times ferry-times__time\" key={time}>\n          <div>{Time.stripSeconds(time)}</div>\n          <div className=\"ferry-times__count-down\">{hourMinuteNotation(time)}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FerryTimes;\n","import React from 'react';\n\nfunction Loading({ props }: any) {\n  return <div {...props}>Loading..</div>;\n}\n\nexport default Loading;\n","import Time from '../../../utils/Time';\nimport { DepTimes, IndexOfClosestDepTime } from '../../../constants/FerryTime.interface';\n\nfunction nextDepartureTimeIndexes(depTimes: DepTimes, currentTime: string): IndexOfClosestDepTime[] {\n  return Object.keys(depTimes).map(key => ({\n    name: key,\n    value: depTimes[key].findIndex(time => time > currentTime),\n  }));\n}\n\nfunction nextDepartureTimeIndexObj(closestTimeIndexes: IndexOfClosestDepTime[], name: string): IndexOfClosestDepTime {\n  return closestTimeIndexes.find(time => time.name === name);\n}\n\nexport function nextDepartureTimeIndex(name: string, depTimes: DepTimes, currentTime: string): number {\n  const closestTimeIndexes = nextDepartureTimeIndexes(depTimes, currentTime);\n  const soonestDepTimeIndex = nextDepartureTimeIndexObj(closestTimeIndexes, name);\n  return soonestDepTimeIndex ? soonestDepTimeIndex.value : 0;\n}\n\nexport function nextDepartureTime(name: string, depTimes: DepTimes, currentTime: string): string {\n  const soonestDepTimeIndex = nextDepartureTimeIndex(name, depTimes, currentTime);\n  if (!soonestDepTimeIndex || soonestDepTimeIndex < 0) {\n    return;\n  }\n  return Time.msToHMS(\n    Math.abs(\n      (Time.timeToDateObj(depTimes[name][soonestDepTimeIndex]) as any) - (Time.timeToDateObj(currentTime) as any),\n    ),\n  );\n}\n","import React from 'react';\nimport CSS from 'csstype';\n\nconst divStyle: CSS.Properties = {\n  backgroundColor: 'var(--color-1)',\n  color: 'var(--color-3)',\n  padding: '0 0 0 0.5em',\n  fontVariantCaps: 'all-small-caps',\n  fontSize: '20px',\n};\n\nfunction DestinationHeader({ title }) {\n  return (\n    <div style={divStyle}>\n      <div> {title}</div>\n    </div>\n  );\n}\n\nexport default DestinationHeader;\n","import axios, { AxiosInstance } from 'axios';\n\nconst HttpClient: AxiosInstance = axios.create({\n  baseURL: process.env.PUBLIC_URL,\n  timeout: 1000,\n});\n\nexport default HttpClient;\n","import React, { useCallback, useState } from 'react';\nimport HttpClient from '../utils/HttpClients';\nimport { AxiosRequestConfig } from 'axios';\n\ntype Status = 'LOADING' | 'ERROR' | 'SUCCESS';\nconst LOADING = 'LOADING';\nconst ERROR = 'ERROR';\nconst SUCCESS = 'SUCCESS';\n\nfunction useHttpClient<T>() {\n  const [response, setResponse] = useState<T>();\n  const [hookStatus, setHookStatus] = useState<Status>(LOADING);\n\n  const fetchData = useCallback(async (axiosInstance: AxiosRequestConfig) => {\n    try {\n      setHookStatus(LOADING);\n      const fetchResponse = await HttpClient.request(axiosInstance);\n      setHookStatus(SUCCESS);\n      setResponse(fetchResponse.data);\n    } catch (error) {\n      console.error(error);\n      setHookStatus(ERROR);\n    }\n  }, []);\n\n  return [response, hookStatus, fetchData] as const;\n}\n\nexport default useHttpClient;\n","import React, { useEffect, useState } from 'react';\nimport { Harbor } from '../../constants/FerryRoutes';\nimport FerryTimes from '../FerryTimes';\nimport { FerryTime, DepTimes } from '../../constants/FerryTime.interface';\nimport Time from '../../utils/Time';\nimport Loading from '../Loading';\nimport { stripDepartureTimes, matchingDestinations } from './helpers/stripDepartureTimes';\nimport { nextDepartureTime, nextDepartureTimeIndex } from './helpers/nextDepartureTime';\nimport DestinationHeader from './DestinationHeader';\nimport useHttpClient from '../../hooks/useHttpClient';\n\ninterface Props {\n  departurePort: Harbor;\n  destinationPort: Harbor;\n}\n\nfunction Destination({ departurePort, destinationPort }: Props) {\n  const [depTimes, setDepTimes] = useState<DepTimes>();\n  const [currentTime, setCurrentTime] = useState<string>(Time.getTheTime());\n  const [ferryTime, status, fetchFerryTimes] = useHttpClient<FerryTime>();\n  const [ferryTimes, setFerryTimes] = useState<FerryTime[]>([]);\n\n  /* On receive of a departure port fetch all matching ferry times json */\n  useEffect(() => {\n    setFerryTimes([]);\n    const lines = departurePort.destinations.flatMap(destination => destination.lines);\n    lines.forEach(line => fetchFerryTimes({ url: `/ferry-times/${line}.json` }));\n  }, [departurePort, fetchFerryTimes]);\n\n  /* For each ferryTimes strip departure times, and concat matching routes from different lines */\n  useEffect(() => {\n    let departureTimes: DepTimes;\n    departurePort.destinations.forEach(destination => {\n      const filterFerryTimes = matchingDestinations(destination, ferryTimes);\n      departureTimes = {\n        ...departureTimes,\n        [destination.port.name]: stripDepartureTimes(filterFerryTimes, Time.getDayType()),\n      };\n    });\n\n    setDepTimes(departureTimes);\n  }, [ferryTimes, departurePort]);\n\n  /* On receive of ferry time object, push in to state ferryTimes array */\n  useEffect(() => {\n    if (!ferryTime) return;\n    setFerryTimes(ferryTimes => [...ferryTimes, ferryTime]);\n  }, [ferryTime, setFerryTimes]);\n\n  /* Update every second to trigger re-render */\n  setInterval(() => {\n    setCurrentTime(Time.getTheTime());\n  }, 1000);\n\n  if (!depTimes)\n    return (\n      <div className=\"destination-port destination-port__loading \">\n        <Loading />\n      </div>\n    );\n\n  return (\n    <>\n      <DestinationHeader title=\"Bestemming\"></DestinationHeader>\n      {departurePort.destinations.map(des => (\n        <span key={des.port.name}>\n          <div className=\"destination-port\">\n            <div className=\"card \">{departurePort.name}</div>\n            <div className=\"card card--blank\"> > </div>\n            <div className=\"card\">{des.port.name}</div>\n            <div className=\"card--end\">\n              <div className=\"card card--time\">\n                <span className=\"card--time__info\">gaat&nbsp;over</span>\n\n                <span className=\"counter\">\n                  {Time.stripHours(nextDepartureTime(des.port.name, depTimes, currentTime))}\n                </span>\n                <span className=\"card--time__info\">minuten</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"line\"></div>\n        </span>\n      ))}\n      <div className=\"times-container\">\n        {departurePort.destinations.map(des => (\n          <FerryTimes\n            destinationPortName={des.port.name}\n            depTimes={depTimes[des.port.name]}\n            closestTimeIndex={nextDepartureTimeIndex(des.port.name, depTimes, currentTime)}\n            key={des.port.fullName}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\nexport default Destination;\n","import { FerryTime } from '../../../constants/FerryTime.interface';\n\nexport const stripDepartureTimes = (ferryTimes: FerryTime[], currentDayNames: string[]): string[] =>\n  ferryTimes.reduce((acc, ferryTime) => {\n    /* check if one of currentDayNames is represented in schedule.validFor */\n    const schedules = ferryTime.schedules.filter(schedule =>\n      currentDayNames.some(day => schedule.validFor.includes(day)),\n    );\n    const times = schedules.map(schedule => schedule.times);\n    const departure = times.map(time => time.map(t => t.departure));\n    return [...acc, ...departure.flat()];\n  }, []);\n\nexport const matchingDestinations = (destination, ferryTimes) =>\n  ferryTimes.filter(ferryTime => ferryTime.journey.destination.fullname === destination.port.fullName);\n","import React from 'react';\nimport Departure from './Departure';\nimport Destination from './Destination';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Ports } from '../constants/FerryRoutes';\nimport { RouteInfo } from '../constants/FerryTime.interface';\n\nfunction Journey(props: RouteComponentProps<RouteInfo>) {\n  const { dep, des } = props.match.params;\n  const departurePort = Ports.find(p => dep === p.url);\n  const destinationPort = Ports.find(p => des === p.url);\n\n  return (\n    <>\n      <Departure departurePort={departurePort} />\n      <Destination departurePort={departurePort} destinationPort={destinationPort} />\n    </>\n  );\n}\n\nexport default withRouter(Journey);\n","import React, { Component } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Ports } from '../constants/FerryRoutes';\nimport Journey from './Journey';\n\nconst ROUTES = [\n  { path: '/:dep/:des', exact: false, component: Journey },\n  { path: '/:dep', exact: false, component: Journey },\n];\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        {ROUTES.map(route => (\n          <Route {...route} key={route.path}></Route>\n        ))}\n        <Redirect to={`/${Ports[0].url}`} />\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport Routes from './components/Routes';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"section\">\n        {/* <Header /> */}\n        <Routes></Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  // <Router basename={process.env.PUBLIC_URL}>\n  //   <App />\n  // </Router>,\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}