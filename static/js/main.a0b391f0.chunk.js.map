{"version":3,"sources":["constants/FerryRoutes.ts","components/DepartureHeader.tsx","components/Departure/Departure.tsx","components/FerryTimes/FerryTimes.tsx","utils/time.ts","components/Loading.tsx","components/Destination/helpers/nextDepartureTime.ts","components/Footer/Footer.tsx","components/DestinationHeader.tsx","components/Destination/Destination.tsx","components/Destination/helpers/stripDepartureTimes.ts","components/Journey.tsx","components/Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["Harbor","name","url","this","dest","val","PONT_STEIGER","CS","NDSM","destinations","port","lines","Ports","divStyle","backgroundColor","color","padding","fontVariantCaps","DepartureHeader","title","style","Departure","departurePort","className","map","key","listName","to","FerryTimes","depTimes","closestTimeIndex","slice","time","Time","date","Date","getHours","getMinutes","getSeconds","split","hours","minutes","seconds","setHours","setMinutes","setSeconds","ms","toISOString","day","getDay","displayDay","push","Loading","props","nextDepartureTimeIndex","currentTime","soonestDepTimeIndex","closestTimeIndexes","find","nextDepartureTimeIndexObj","Object","keys","value","findIndex","nextDepartureTimeIndexes","Footer","getDayType","x","line","DestinationHeader","Destination","destinationPort","useState","setDepTimes","getTheTime","setCurrentTime","useEffect","forEach","Promise","all","fn","fileName","fetch","process","then","res","json","ferryTimes","prev","currentDayNames","reduce","acc","ferryTime","departure","schedules","filter","schedule","some","validFor","includes","times","t","flat","stripDepartureTimes","catch","err","console","error","setInterval","des","msToHMS","Math","abs","timeToDateObj","nextDepartureTime","withRouter","match","params","dep","p","ROUTES","path","exact","component","Journey","Routes","route","Component","App","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0b391f0.chunk.js","sourcesContent":["export interface Harbor {\n  name: string;\n  url: string;\n  dest: { port: Harbor; lines: Array<string> }[];\n}\n\nexport class Harbor {\n  constructor(name, url) {\n    this.name = name;\n    this.url = url;\n  }\n\n  get destinations() {\n    return this.dest;\n  }\n\n  set destinations(val) {\n    this.dest = val;\n  }\n\n  get allDepartureTimes() {\n    return '';\n  }\n}\n\nconst PONT_STEIGER = new Harbor('Pont steiger', 'pont-steiger');\nconst CS = new Harbor('Centraal', 'centraal');\nconst NDSM = new Harbor('NDSM', 'ndsm');\n\nNDSM.destinations = [\n  { port: CS, lines: ['905_NDM_CS', '906_NDSM_CS'] },\n  { port: PONT_STEIGER, lines: ['903_NDSM_PST'] },\n];\nPONT_STEIGER.destinations = [{ port: NDSM, lines: ['903_PST_NDSM'] }];\nCS.destinations = [{ port: NDSM, lines: ['906_CS_NDSM', '905_CS_NDSM'] }];\n\nexport const Ports = [NDSM, PONT_STEIGER, CS];\n","import React from 'react';\nimport CSS from 'csstype';\n\nconst divStyle: CSS.Properties = {\n  backgroundColor: 'var(--color-2)',\n  color: 'var(--color-3)',\n  padding: '0.1em 0 0 0.5em',\n  fontVariantCaps: 'all-small-caps',\n};\n\nfunction DepartureHeader({ title }) {\n  return (\n    <div style={divStyle}>\n      <div> {title}</div>\n    </div>\n  );\n}\n\nexport default DepartureHeader;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Ports, Harbor } from '../../constants/FerryRoutes';\nimport DepartureHeader from '../DepartureHeader';\n\ninterface Props {\n  departurePort: Harbor;\n}\n\nfunction Departure({ departurePort }: Props) {\n  const isActiveClass = (listName: string): string => listName === departurePort?.name && 'departure-active';\n\n  return (\n    <>\n      <DepartureHeader title=\"Vertrek\"></DepartureHeader>\n      <div className={`departure`}>\n        {Ports.map(port => (\n          <div key={port.name} className={`departure-link ${isActiveClass(port.name)}`}>\n            <Link to={`/${port.url}`}>{port.name}</Link>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Departure;\n","import React from 'react';\nimport { DepTimes } from '../../constants/FerryTime.interface';\n\ninterface Props {\n  depTimes: DepTimes;\n  destinationPortName: string;\n  closestTimeIndex: number;\n}\n\nfunction FerryTimes({ depTimes, closestTimeIndex = 0 }) {\n  if (!depTimes) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"ferry-times\">\n      {depTimes.slice(closestTimeIndex).map(time => (\n        <div key={time}>{time}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default FerryTimes;\n","export default class Time {\n  static getTheTime() {\n    const date = new Date();\n    const currentTime = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n    return currentTime;\n  }\n\n  static timeToDateObj(time: string): Date {\n    const [hours, minutes, seconds] = time.split(':');\n    let date = new Date();\n    date.setHours(+hours);\n    date.setMinutes(+minutes);\n    date.setSeconds(+seconds);\n    return date;\n  }\n\n  static msToHMS(ms) {\n    return new Date(ms).toISOString().slice(11, 19);\n  }\n\n  static getDayType(): string[] {\n    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n    const day = new Date().getDay() - 1;\n    let displayDay = [];\n\n    if (day < 6) {\n      displayDay.push('weekdays');\n    }\n    return [...displayDay, days[day]];\n  }\n}\n","import React from 'react';\n\nfunction Loading({ props }: any) {\n  return <div {...props}>Loading..</div>;\n}\n\nexport default Loading;\n","import Time from '../../../utils/time';\nimport { DepTimes, IndexOfClosestDepTime } from '../../../constants/FerryTime.interface';\n\nfunction nextDepartureTimeIndexes(depTimes: DepTimes, currentTime: string): IndexOfClosestDepTime[] {\n  return Object.keys(depTimes).map(key => ({\n    name: key,\n    value: depTimes[key].findIndex(time => time > currentTime),\n  }));\n}\n\nfunction nextDepartureTimeIndexObj(closestTimeIndexes: IndexOfClosestDepTime[], name: string): IndexOfClosestDepTime {\n  return closestTimeIndexes.find(time => time.name === name);\n}\n\nexport function nextDepartureTimeIndex(name: string, depTimes: DepTimes, currentTime: string): number {\n  const closestTimeIndexes = nextDepartureTimeIndexes(depTimes, currentTime);\n  const soonestDepTimeIndex = nextDepartureTimeIndexObj(closestTimeIndexes, name);\n  return soonestDepTimeIndex ? soonestDepTimeIndex.value : 0;\n}\n\nexport function nextDepartureTime(name: string, depTimes: DepTimes, currentTime: string): string {\n  const soonestDepTimeIndex = nextDepartureTimeIndex(name, depTimes, currentTime);\n  if (!soonestDepTimeIndex || soonestDepTimeIndex < 0) {\n    return;\n  }\n  return Time.msToHMS(\n    Math.abs(\n      (Time.timeToDateObj(depTimes[name][soonestDepTimeIndex]) as any) - (Time.timeToDateObj(currentTime) as any),\n    ),\n  );\n}\n","import React from 'react';\nimport Time from './../../utils/time';\n\nfunction Footer({ lines }: { lines: string[] }) {\n  return (\n    <div className=\"meta-info\">\n      <div>\n        {Time.getDayType().map(x => x + ', ')}\n        {lines && lines.map(line => `${line}, `)}\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport CSS from 'csstype';\n\nconst divStyle: CSS.Properties = {\n  backgroundColor: 'var(--color-1)',\n  color: 'var(--color-3)',\n  padding: '0 0 0 0.5em',\n  fontVariantCaps: 'all-small-caps',\n};\n\nfunction DestinationHeader({ title }) {\n  return (\n    <div style={divStyle}>\n      <div> {title}</div>\n    </div>\n  );\n}\n\nexport default DestinationHeader;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Harbor } from '../../constants/FerryRoutes';\nimport FerryTimes from '../FerryTimes';\nimport { FerryTime, DepTimes } from '../../constants/FerryTime.interface';\nimport Time from '../../utils/time';\nimport Loading from '../Loading';\nimport { stripDepartureTimes } from './helpers/stripDepartureTimes';\nimport { nextDepartureTime, nextDepartureTimeIndex } from './helpers/nextDepartureTime';\nimport Footer from './../Footer';\nimport DestinationHeader from '../DestinationHeader';\n\nfunction fetchJSON(fileName): Promise<FerryTime> {\n  // env for deployment on github\n  return fetch(`${process.env.PUBLIC_URL}/ferry-times/${fileName}.json`).then(res => res.json());\n}\n\ninterface Props {\n  departurePort: Harbor;\n  destinationPort: Harbor;\n}\n\nfunction Destination({ departurePort, destinationPort }: Props) {\n  const [depTimes, setDepTimes] = useState<DepTimes>();\n  const [currentTime, setCurrentTime] = useState(Time.getTheTime());\n\n  useEffect(() => {\n    departurePort.destinations.forEach(dest => {\n      Promise.all(dest.lines.map(fn => fetchJSON(fn)))\n        .then(ferryTimes =>\n          setDepTimes(prev => ({\n            ...prev,\n            ...{ [`${dest.port.name}`]: stripDepartureTimes(ferryTimes, Time.getDayType()) },\n          })),\n        )\n        .catch(err => console.error(err));\n    });\n  }, [departurePort]);\n\n  // Run timer every second\n  setInterval(() => {\n    setCurrentTime(Time.getTheTime());\n  }, 1000);\n\n  if (!depTimes)\n    return (\n      <div className=\"destination-port destination-port__loading \">\n        <Loading />\n      </div>\n    );\n\n  const isActiveClass = (listName: string): string => listName === destinationPort?.name && 'destination-active';\n\n  return (\n    <>\n      <DestinationHeader title=\"Bestemming\"></DestinationHeader>\n\n      {departurePort.destinations.map(des => (\n        <div className=\"destination-port\" key={des.port.name}>\n          <div className={`destination-row-inner-left ${isActiveClass(des.port.name)}`}>\n            <Link to={`/${departurePort.url}/${des.port.url}`}>{des.port.name}</Link>\n          </div>\n          <div className=\"destination-row-inner-right\">{nextDepartureTime(des.port.name, depTimes, currentTime)}</div>\n        </div>\n      ))}\n\n      <FerryTimes\n        depTimes={depTimes[destinationPort?.name]}\n        closestTimeIndex={nextDepartureTimeIndex(destinationPort?.name, depTimes, currentTime)}\n      />\n\n      <Footer lines={departurePort.destinations.find(des => des.port === destinationPort)?.lines} />\n    </>\n  );\n}\nexport default Destination;\n","import { FerryTime } from '../../../constants/FerryTime.interface';\n\nexport function stripDepartureTimes(ferryTimes: FerryTime[], currentDayNames: string[]): string[] {\n  return ferryTimes.reduce((acc, ferryTime) => {\n    // check if one of currentDayNames is represented in schedule.validFor\n    const schedules = ferryTime.schedules.filter(schedule =>\n      currentDayNames.some(day => schedule.validFor.includes(day)),\n    );\n    const times = schedules.map(schedule => schedule.times);\n    const departure = times.map(time => time.map(t => t.departure));\n    return [...acc, ...departure.flat()];\n  }, []);\n}\n","import React from 'react';\nimport Departure from './Departure';\nimport Destination from './Destination';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Ports } from '../constants/FerryRoutes';\nimport { RouteInfo } from '../constants/FerryTime.interface';\n\nfunction Journey(props: RouteComponentProps<RouteInfo>) {\n  const { dep, des } = props.match.params;\n  const departurePort = Ports.find(p => dep === p.url);\n  const destinationPort = Ports.find(p => des === p.url);\n\n  return (\n    <>\n      <Departure departurePort={departurePort} />\n      <Destination departurePort={departurePort} destinationPort={destinationPort} />\n    </>\n  );\n}\n\nexport default withRouter(Journey);\n","import React, { Component } from 'react';\nimport Departure from './Departure';\nimport { Switch, Route } from 'react-router-dom';\nimport Journey from './Journey';\n\nconst ROUTES = [\n  { path: '/', exact: true, component: Departure },\n  { path: '/:dep/:des', exact: false, component: Journey },\n  { path: '/:dep', exact: false, component: Journey },\n];\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        {ROUTES.map(route => (\n          <Route {...route} key={route.path}></Route>\n        ))}\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport Routes from './components/Routes';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"section\">\n        {/* <Header /> */}\n        <Routes></Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { HashRouter } from 'react-router-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  //   <HashRouter basename={process.env.PUBLIC_URL}>\n  //   <App />\n  // </HashRouter>\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}